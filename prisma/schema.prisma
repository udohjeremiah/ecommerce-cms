// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Store {
  id        String      @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Billboard Billboard[]
  Category  Category[]
  Size      Size[]
  Color     Color[]
  Product   Product[]
  Order     Order[]
}

model Billboard {
  id            String     @id @default(uuid())
  storeId       String
  label         String
  imagePublicId String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Store         Store      @relation(fields: [storeId], references: [id])
  Category      Category[]
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Store       Store     @relation(fields: [storeId], references: [id])
  Billboard   Billboard @relation(fields: [billboardId], references: [id])
  Product     Product[]
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
  Product   Product[]
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Store     Store     @relation(fields: [storeId], references: [id])
  Product   Product[]
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  sizeId     String
  colorId    String
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Store      Store       @relation(fields: [storeId], references: [id])
  Category   Category    @relation(fields: [categoryId], references: [id])
  Size       Size        @relation(fields: [sizeId], references: [id])
  Color      Color       @relation(fields: [colorId], references: [id])
  Image      Image[]
  OrderItem  OrderItem[]
}

model Image {
  id            String   @id @default(uuid())
  productId     String
  imagePublicId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String      @id @default(uuid())
  storeId   String
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Store     Store       @relation(fields: [storeId], references: [id])
  OrderItem OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  Order     Order   @relation(fields: [orderId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}
